// <auto-generated />
using System;
using HistoricalStore.Data.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HistoricalStore.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20241203194641_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HistoricalStore.Data.Models.OrderModels.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.OrderModels.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.OrderModels.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.SupplyModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.SupplyModels.HistoricalPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HistoricalPeriods");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.SupplyModels.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.SupplyModels.ProductHistoricalPeriod", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("HistoricalPeriodId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "HistoricalPeriodId");

                    b.HasIndex("HistoricalPeriodId");

                    b.ToTable("ProductHistoricalPeriods");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.SupplyModels.ProductMaterial", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("ProductMaterials");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.UserModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.UserModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Accessory", b =>
                {
                    b.HasBaseType("HistoricalStore.Data.Models.ProductModels.Product");

                    b.Property<string>("AccessoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Accessories", (string)null);
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Armor", b =>
                {
                    b.HasBaseType("HistoricalStore.Data.Models.ProductModels.Product");

                    b.Property<string>("ArmorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.ToTable("Armors", (string)null);
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Book", b =>
                {
                    b.HasBaseType("HistoricalStore.Data.Models.ProductModels.Product");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Product", b =>
                {
                    b.HasBaseType("HistoricalStore.Data.Models.ProductModels.Product");

                    b.Property<bool>("IsSharp")
                        .HasColumnType("bit");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("WeaponType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.ToTable("Weapons", (string)null);
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.OrderModels.Order", b =>
                {
                    b.HasOne("HistoricalStore.Data.Models.OrderModels.OrderStatus", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.OrderModels.OrderItem", b =>
                {
                    b.HasOne("HistoricalStore.Data.Models.OrderModels.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HistoricalStore.Data.Models.ProductModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Product", b =>
                {
                    b.HasOne("HistoricalStore.Data.Models.SupplyModels.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.SupplyModels.ProductHistoricalPeriod", b =>
                {
                    b.HasOne("HistoricalStore.Data.Models.SupplyModels.HistoricalPeriod", "HistoricalPeriod")
                        .WithMany("ProductHistoricalPeriods")
                        .HasForeignKey("HistoricalPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HistoricalStore.Data.Models.ProductModels.Product", "Product")
                        .WithMany("ProductHistoricalPeriods")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoricalPeriod");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.SupplyModels.ProductMaterial", b =>
                {
                    b.HasOne("HistoricalStore.Data.Models.SupplyModels.Material", "Material")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HistoricalStore.Data.Models.ProductModels.Product", "Product")
                        .WithMany("ProductMaterials")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.UserModels.User", b =>
                {
                    b.HasOne("HistoricalStore.Data.Models.UserModels.Role", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Accessory", b =>
                {
                    b.HasOne("HistoricalStore.Data.Models.ProductModels.Product", null)
                        .WithOne()
                        .HasForeignKey("HistoricalStore.Data.Models.ProductModels.Accessory", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Armor", b =>
                {
                    b.HasOne("HistoricalStore.Data.Models.ProductModels.Product", null)
                        .WithOne()
                        .HasForeignKey("HistoricalStore.Data.Models.ProductModels.Armor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Book", b =>
                {
                    b.HasOne("HistoricalStore.Data.Models.ProductModels.Product", null)
                        .WithOne()
                        .HasForeignKey("HistoricalStore.Data.Models.ProductModels.Book", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Product", b =>
                {
                    b.HasOne("HistoricalStore.Data.Models.ProductModels.Product", null)
                        .WithOne()
                        .HasForeignKey("HistoricalStore.Data.Models.ProductModels.Product", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.OrderModels.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.OrderModels.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.ProductModels.Product", b =>
                {
                    b.Navigation("ProductHistoricalPeriods");

                    b.Navigation("ProductMaterials");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.SupplyModels.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.SupplyModels.HistoricalPeriod", b =>
                {
                    b.Navigation("ProductHistoricalPeriods");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.SupplyModels.Material", b =>
                {
                    b.Navigation("ProductMaterials");
                });

            modelBuilder.Entity("HistoricalStore.Data.Models.UserModels.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
